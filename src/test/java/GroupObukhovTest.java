import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.Color;
import org.testng.Assert;
import org.testng.annotations.Test;
import runner.BaseTest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

public class GroupObukhovTest extends BaseTest {

    private final String URL = "https://urent.ru/";

    private final String URLFranchise = "https://start.urent.ru/";

    private final List<String> BASIC_COLORS_HEX = Arrays.asList("#804AFF", "#000000", "#FFFFFF");

    List<String> LINK_TO_CHECK_BASIC_COLORS = Arrays.asList(
            "https://design.urent.ru/img/colors/804aff.svg",
            "https://design.urent.ru/img/colors/000000.svg",
            "https://design.urent.ru/img/colors/ffffff.svg");

    private List<WebElement> getMainMenu() {
        return getDriver().findElements(By.xpath("//ul[@class=\"menu-list\"]/li"));
    }

    private List<WebElement> getMenuFranchise() {
        return getDriver().findElements(By.xpath("//ul[@class=\"navigation-list\"]/li"));
    }

    private List<WebElement> checkMenuHelp(String chooseMenu) {
        switch (chooseMenu) {
            case "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
                return getDriver().findElements(By.xpath("//div[@class = 'faq-block'][1]/button"));
            case "–ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã":
                return getDriver().findElements(By.xpath("//div[@class = 'faq-block'][2]/button"));
            case "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∏ —Ñ–∏–Ω–∞–Ω—Å—ã":
                return getDriver().findElements(By.xpath("//div[@class = 'faq-block'][3]/button"));
            case "–í–æ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã":
                return getDriver().findElements(By.xpath("//div[@class = 'faq-block'][4]/button"));
            case "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã":
                return getDriver().findElements(By.xpath("//div[@class = 'faq-block'][5]/button"));
            case "–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã":
                return getDriver().findElements(By.xpath("//div[@class = 'faq-block'][6]/button"));
            default:
                return getDriver().findElements(By.xpath("//button[@class = 'accordion']"));
        }
    }

    private void goToHelpPage() {
        getDriver().get(URL);
        getMainMenu().get(1).click();
    }

    private void goToBrandBookPage() {
        getDriver().get(URL);
        getDriver().findElement(By.xpath("//a[contains(text(), '–ë—Ä–µ–Ω–¥–±—É–∫')]")).click();
    }

    private void goToAboutServicePage() {
        getDriver().get(URLFranchise);
        getMenuFranchise().get(0).click();
    }

    private void goToFunctionPage() {
        getDriver().get(URLFranchise);
        getMenuFranchise().get(1).click();
    }

    private void goToOurPartnerPage() {
        getDriver().get(URLFranchise);
        getMenuFranchise().get(2).click();
    }

    private void goToStartPage() {
        getDriver().get(URLFranchise);
        getMenuFranchise().get(3).click();
    }

    private void goToPalette() {
        goToBrandBookPage();
        getDriver().findElement(By.linkText("–ü–∞–ª–∏—Ç—Ä–∞")).click();
    }

    @Test
    public void testCheckCountMainMenuButtons() {
        getDriver().get(URL);

        Assert.assertEquals(4, getMainMenu().size());
    }

    @Test
    public void testCheckNamesMainMenuButtons() {
        getDriver().get(URL);
        List<String> expectedResult = Arrays.asList("–ì–ª–∞–≤–Ω–∞—è", "–ü–æ–º–æ—â—å", "–í–∞–∫–∞–Ω—Å–∏–∏", "–§—Ä–∞–Ω—à–∏–∑–∞");

        for (int i = 0; i < getMainMenu().size(); i++) {
            Assert.assertEquals(getMainMenu().get(i).getText(), expectedResult.get(i));
        }
    }

    @Test
    public void testHelpLink() {
        getDriver().get(URL);
        goToHelpPage();

        Assert.assertEquals(getDriver().getCurrentUrl(), "https://urent.ru/rules/index.html");
    }

    @Test
    public void testHelpMenuHeaders() {
        getDriver().get(URL);
        goToHelpPage();

        List<WebElement> actualResult = getDriver().findElements(By.xpath("//h3"));
        List<String> expectedResult = new ArrayList<>();
        expectedResult.add(0, "üìå –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:");
        expectedResult.add(1, "üö¶ –ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã:");
        expectedResult.add(2, "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∏ —Ñ–∏–Ω–∞–Ω—Å—ã:");
        expectedResult.add(3, "üõ¥ üö≤ –í–æ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã:");
        expectedResult.add(4, "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã:");
        expectedResult.add(5, "‚öôÔ∏è –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã:");

        for (int i = 0; i < actualResult.size(); i++) {
            Assert.assertEquals(actualResult.get(i).getText(), expectedResult.get(i));
        }
    }

    @Test
    public void testCountHelpsMenuPointsInHeaders() {
        getDriver().get(URL);
        goToHelpPage();

        Assert.assertEquals(checkMenuHelp("–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∏ —Ñ–∏–Ω–∞–Ω—Å—ã").size(), 16);
    }

    @Test
    public void testHelpsMenuContent() {
        getDriver().get(URL);
        goToHelpPage();

        List<String> expectedResult = Arrays.asList(
                "–ß–∞—Å–æ–≤–æ–π —Ç–∞—Ä–∏—Ñ",
                "–¢–∞—Ä–∏—Ñ \"–ü–æ–∫–∞ –Ω–µ —Å—è–¥–µ—Ç\"",
                "Daily Pass",
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã",
                "–ì–¥–µ –º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å Urent?",
                "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É?",
                "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∞—Ä–µ–Ω–¥—ã",
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ?");

        List<String> menuHelp1 = new ArrayList<>();
        for (WebElement w : checkMenuHelp("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")) {
            menuHelp1.add(w.getText());
        }

        Assert.assertEquals(menuHelp1, expectedResult);
    }

    @Test
    public void testCheckUrentPageButton() {
        getDriver().get(URL);
        goToHelpPage();
        getDriver().findElement(By.cssSelector(".logotype-img")).click();

        Assert.assertEquals(getDriver().findElement(By.xpath("//h1")).getText(), "–ü—Ä–∏–≤–µ—Ç! –ú—ã ‚Äî –Æ—Ä–µ–Ω—Ç, —à–µ—Ä–∏–Ω–≥ —ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–æ–≤ –∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤");
    }

    @Test
    public void testCheckFooterMenu() {
        getDriver().get(URL);
        List<WebElement> footerMenu = getDriver().findElements(By.cssSelector(".footer div p"));

        List<String> footerHeaders = Arrays.asList("–î–æ–∫—É–º–µ–Ω—Ç—ã", "–ú—ã —Ç—É—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç—ã");
        for (int i = 0; i < footerMenu.size(); i++) {
            Assert.assertEquals(footerMenu.get(i).getText(), footerHeaders.get(i));
        }
    }

    @Test
    public void testLinkToBrandBookPage() {
        goToBrandBookPage();

        Assert.assertEquals(getDriver().findElement(By.cssSelector(".logotype-img")).getAttribute("alt"), "–õ–æ–≥–æ—Ç–∏–ø Urent");
    }

    @Test
    public void testLinkPrivacyPolicy() {
        getDriver().get(URL);
        WebElement linkPrivacyPolicy = getDriver().findElement(By.xpath("//a[@href='/docs/privacy.html'] "));
        linkPrivacyPolicy.click();
        WebElement titlePrivacyPolicy = getDriver().findElement(By.xpath("//h1[text()='–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏']"));
        Assert.assertEquals(titlePrivacyPolicy.getText(), "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏");
    }

    @Test
    public void testLinkContractJoin() {
        getDriver().get(URL);
        WebElement linkContractJoin = getDriver().findElement(By.xpath("//a [@href='/docs/accession.html']"));
        linkContractJoin.click();
        WebElement titleContractJoin = getDriver().findElement(By.xpath("//h1 [text() = '–î–æ–≥–æ–≤–æ—Ä –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –°–µ—Ä–≤–∏—Å–∞ –Æ—Ä–µ–Ω—Ç']"));
        Assert.assertEquals(titleContractJoin.getText(), "–î–æ–≥–æ–≤–æ—Ä –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –°–µ—Ä–≤–∏—Å–∞ –Æ—Ä–µ–Ω—Ç");
    }

    @Test
    public void testActiveElementsOfMainMenu(){
        getDriver().get(URL);
        List<WebElement> nowMainMenu = getDriver().findElements(By.cssSelector(".menu-list"));
        //List<String> expectedMainMenu = Arrays.asList("–ì–ª–∞–≤–Ω–∞—è", "–ü–æ–º–æ—â—å", "–í–∞–∫–∞–Ω—Å–∏–∏", "–§—Ä–∞–Ω—à–∏–∑–∞");
        int size = nowMainMenu.size();
        int activeElement = size;
        int countInactiveElement = 0;
        int countClick = 0;
        for (int i = 0; i < size - 2; i++){
            if(activeElement < size){ // –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç "–ì–ª–∞–≤–Ω–∞—è" –¥–≤–∞ —Ä–∞–∑–∞, –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–∞–π—Ç–∞ –∏ –ø—Ä–∏ –∫–ª–∏–∫–µ.
                if(countClick == 0){
                    i = 0;
                }
                nowMainMenu.get(i).click();
                countClick++;
            }// –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑.
            for (int j = 0; j < size; j++) {
                if (nowMainMenu.get(j).getAttribute("class").contains("menu-active-link")) {
                    activeElement = j;
                } else {
                    countInactiveElement++;
                }
            }

            Assert.assertTrue(activeElement == i && size - countInactiveElement == 1);

            countInactiveElement = 0;
        }

    }

    @Test
    public void testCheckBrandBookBasicColorsHEX() {
        goToPalette();
        List<WebElement> colors = getDriver().findElements(By.xpath("//div[@id = 'palette-three']//div[@class = 'colorchart']"));

        for (int i = 0; i < colors.size(); i++) {
            Assert.assertEquals(colors.get(i).getText().substring(0, 7), BASIC_COLORS_HEX.get(i));
        }
    }

    @Test
    public void testCheckBrandBookAdditionalColorsHEX() {
        goToPalette();
        List<WebElement> colors = getDriver().findElements(By.xpath("//div[@id = 'palette-four']//div[@class = 'colorchart']"));
        List<String> expectedResult = Arrays.asList("#FFC65B", "#FF73D5", "#9FD7FF");

        for (int i = 0; i < colors.size(); i++) {
            Assert.assertEquals(colors.get(i).getText().substring(0, 7), expectedResult.get(i));
        }
    }

    @Test
    public void testCheckDownloadAppButtonColors(){
        getDriver().get(URL);
        WebElement downloadAppButton = getDriver().findElement(By.cssSelector(".menu-button"));

        Assert.assertEquals(downloadAppButton.getCssValue("color"), "rgba(255, 255, 255, 1)");
        Assert.assertEquals(downloadAppButton.getCssValue("background-color"), "rgba(128, 74, 255, 1)");
    }

    @Test
    public void testCheckHeroButtonColors(){
        getDriver().get(URL);
        WebElement heroButton = getDriver().findElement(By.cssSelector(".hero-button-text"));

        Assert.assertEquals(heroButton.getCssValue("color"), "rgba(128, 74, 255, 1)");
        Assert.assertEquals(heroButton.getCssValue("background-color"), "rgba(0, 0, 0, 0)");
    }

    @Test
    public void testCheckHeroButtonColorsAfterNavigateMouse(){
        getDriver().get(URL);
        WebElement heroButton = getDriver().findElement(By.cssSelector(".hero-button"));

        String startBackgroundColor = Color.fromString(heroButton.getCssValue("background-color")).asRgb();
        new Actions(getDriver())
                .moveToElement(heroButton)
                .perform();
        String afterMouseNavigateBackgroundColor = Color.fromString(heroButton.getCssValue("background-color")).asRgb();

        Assert.assertNotEquals(startBackgroundColor, afterMouseNavigateBackgroundColor);
        Assert.assertEquals(afterMouseNavigateBackgroundColor, "rgb(128, 74, 255)");
    }

    @Test
    public void testCheckHowToUseService(){
        getDriver().get(URL);

        List<WebElement> stepNumbersHowToUseService = getDriver().findElements(By.cssSelector(".block3-grid span"));
        List<WebElement> stepNamesHowToUseService = getDriver().findElements(By.cssSelector(".block3-grid li"));
        List<WebElement> descriptionHowToUseService = getDriver().findElements(By.cssSelector(".block3-grid p"));

        String propertyActiveButton = "2px solid rgb(128, 74, 255)";
        List<String> stepsNames = Arrays.asList("–ù–∞–π–¥–∏ —Å–∞–º–æ–∫–∞—Ç", "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR", "–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ", "–ú–æ–∂–Ω–æ –µ—Ö–∞—Ç—å!");
        List<String> stepsDescriptions = Arrays.asList(
                "–ù–∞ –∫–∞—Ä—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç–º–µ—á–µ–Ω—ã –≤—Å–µ –Ω–∞—à–∏ —Å–∞–º–æ–∫–∞—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∞—Ä–µ–Ω–¥—ã.–í –∂–∏–∑–Ω–∏ –æ–Ω–∏ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ, –∏–Ω–æ–≥–¥–∞ –Ω–∞ –Ω–∏—Ö –±—ã–≤–∞–µ—Ç –±—Ä–µ–Ω–¥–∏–Ω–≥ –≥–æ—Ä–æ–¥–∞",
                "–ö–æ–≥–¥–∞ —Å–∞–º–æ–∫–∞—Ç –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π ‚Äì –Ω–∞–∂–º–∏ –Ω–∞ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥.–û–Ω –±—É–¥–µ—Ç –Ω–∞ —Ä—É–ª–µ —Å–∞–º–æ–∫–∞—Ç–∞",
                "–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ.–ü–æ–º–∏–Ω—É—Ç–Ω—ã–π –≤—ã–≥–æ–¥–µ–Ω –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫.–ï—Å–ª–∏ —Å–æ–±—Ä–∞–ª—Å—è –∫–∞—Ç–∞—Ç—å—Å—è –¥–æ–ª–≥–æ ‚Äì –ª—É—á—à–µ –≤–∑—è—Ç—å ‚Äú–ü–æ–∫–∞ –Ω–µ —Å—è–¥–µ—Ç‚Äù –∏–ª–∏ –ø—Ä–æ–µ–∑–¥–Ω–æ–π –Ω–∞ –¥–µ–Ω—å",
                "–í—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ?–ñ–º–∏ ‚Äú–°—Ç–∞—Ä—Ç‚Äù –∏ –º–æ–∂–Ω–æ –µ—Ö–∞—Ç—å.–ö–æ–≥–¥–∞ —Ä–µ—à–∏—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É ‚Äì –Ω–∞–π–¥–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –ø–∞—Ä–∫–æ–≤–∫—É.–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö."
        );

        for (int i = 0; i < stepNumbersHowToUseService.size(); i++) {
            stepNumbersHowToUseService.get(i).click();
            Assert.assertEquals(stepNumbersHowToUseService.get(i).getCssValue("border"), propertyActiveButton);
            Assert.assertEquals(stepNumbersHowToUseService.get(i).getText(), String.valueOf(i + 1));
            Assert.assertEquals(stepNamesHowToUseService.get(i).getText().substring(2), stepsNames.get(i));
            Assert.assertEquals(descriptionHowToUseService.get(i).getText().replace("\n", ""), stepsDescriptions.get(i));
        }
    }

    @Test
    public void testLinkVacancy() {
        getDriver().get(URL);
        WebElement linkVacancy = getDriver().findElement(By.xpath("//li[@class = 'menu-item']/a[text()='–í–∞–∫–∞–Ω—Å–∏–∏']"));
        Set<String> oldWindowsSet = getDriver().getWindowHandles();
        linkVacancy.click();
        Set<String> newWindowsSet = getDriver().getWindowHandles();
        newWindowsSet.removeAll(oldWindowsSet);
        String newWindowHandle = newWindowsSet.iterator().next();
        getDriver().switchTo().window(newWindowHandle);
        Assert.assertTrue(getDriver().getCurrentUrl().contains("hh.ru"));
    }

    @Test
    public void testLinkVKontakte() {
        getDriver().get(URL);
        WebElement vKontakte = getDriver().findElement(By.xpath("//a[@href='https://vk.com/urent_russia']"));
        Set<String> oldWindowsSet = getDriver().getWindowHandles();
        vKontakte.click();
        Set<String> newWindowsSet = getDriver().getWindowHandles();
        newWindowsSet.removeAll(oldWindowsSet);
        String newWindowHandle = newWindowsSet.iterator().next();
        getDriver().switchTo().window(newWindowHandle);
        Assert.assertTrue(getDriver().getCurrentUrl().contains("vk.com"));
    }


    @Test
    public void testCheckCountMenuFranchiseButtons() {
        getDriver().get(URLFranchise);

        Assert.assertEquals( getMenuFranchise().size(), 4);
    }

    @Test
    public void testCheckNamesMenuFranchiseButtons() {
        getDriver().get(URLFranchise);
        List<String> expectedResult = Arrays.asList("–û —Å–µ—Ä–≤–∏—Å–µ", "–§—É–Ω–∫—Ü–∏–∏", "–ù–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä", "–ó–∞–ø—É—Å–∫");

        for (int i = 0; i < getMenuFranchise().size(); i++) {
            Assert.assertEquals(getMenuFranchise().get(i).getText(), expectedResult.get(i));
        }
    }

    @Test
    public void testAboutServiceLink() {
        getDriver().get(URLFranchise);
        goToAboutServicePage();

        Assert.assertEquals(getDriver().getCurrentUrl(), "https://start.urent.ru/#about-service");
    }

    @Test
    public void testFunctionLink() {
        getDriver().get(URLFranchise);
        goToFunctionPage();

        Assert.assertEquals(getDriver().getCurrentUrl(), "https://start.urent.ru/#function");
    }

    @Test
    public void testOurPartnerLink() {
        getDriver().get(URLFranchise);
        goToOurPartnerPage();

        Assert.assertEquals(getDriver().getCurrentUrl(), "https://start.urent.ru/#our-partner");
    }

    @Test
    public void testStartLink() {
        getDriver().get(URLFranchise);
        goToStartPage();

        Assert.assertEquals(getDriver().getCurrentUrl(), "https://start.urent.ru/#start");
    }

    @Test
    public void testCheckPaletteBasicColorsLinks() {
        goToPalette();
        List<String> actualLinksToCheckBasicColors = new ArrayList<>();

        List<WebElement> basicColorsExamples = getDriver()
                .findElements(By.xpath("//div[@id = 'palette-three']/div[@class= 'block-grid-colorblock']/div[1]"));
        for (int i = 0; i < basicColorsExamples.size(); i++) {
            actualLinksToCheckBasicColors.add(i, basicColorsExamples.get(i).getCssValue("background-image")
                    .replace("url(\"", "").replace("\")", ""));
        }

        Assert.assertEquals(actualLinksToCheckBasicColors, LINK_TO_CHECK_BASIC_COLORS);
    }

    @Test(dependsOnMethods = "testCheckPaletteBasicColorsLinks")
    public void testCheckMatchColorAnnotationAndLinkColor() {
        goToPalette();

        List<String> checkColors = new ArrayList<>();
        List<WebElement> basicColorsTextDescriptionsFromDesignPage = getDriver().findElements(By.xpath("//div[@id = 'palette-three']//div[@class = 'colorchart']"));
        List<String> basicColors = new ArrayList<>();
        for (int i = 0; i < basicColorsTextDescriptionsFromDesignPage.size(); i++) {
            basicColors.add(i, basicColorsTextDescriptionsFromDesignPage.get(i).getText().substring(0, 7));
        }
        for (String str : LINK_TO_CHECK_BASIC_COLORS) {
            getDriver().get(str);
            checkColors.add(Color.fromString(getDriver().findElement(By.cssSelector(" path")).getCssValue("fill")).asHex().toUpperCase());
        }

        Assert.assertEquals(checkColors, basicColors);
    }
}